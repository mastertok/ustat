# Generated by Django 4.2.18 on 2025-01-24 12:27

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('student', 'Студент'), ('teacher', 'Учитель'), ('producer', 'Продюсер'), ('admin', 'Администратор')], db_index=True, default='student', max_length=20, verbose_name='Роль')),
                ('bio', models.TextField(blank=True, verbose_name='Биография')),
                ('avatar', models.ImageField(blank=True, upload_to='avatars/', verbose_name='Фото профиля')),
                ('phone', models.CharField(blank=True, max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть в формате: '+999999999'. До 15 цифр.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Телефон')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'permissions': [('can_enroll_course', 'Может записаться на курс'), ('can_view_course_content', 'Может просматривать содержимое курса'), ('can_leave_review', 'Может оставлять отзывы'), ('can_create_course', 'Может создавать курсы'), ('can_edit_own_course', 'Может редактировать свои курсы'), ('can_view_course_analytics', 'Может просматривать аналитику своих курсов'), ('can_interact_with_students', 'Может взаимодействовать со студентами'), ('can_edit_course_landing', 'Может редактировать лендинги курсов'), ('can_manage_promotions', 'Может управлять акциями и промокодами'), ('can_view_marketing_analytics', 'Может просматривать маркетинговую аналитику'), ('can_manage_advertising', 'Может управлять рекламой'), ('can_manage_email_campaigns', 'Может управлять email-рассылками')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('slug', models.CharField(max_length=150, unique=True, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Специализация',
                'verbose_name_plural': 'Специализации',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name', 'slug'], name='accounts_sp_name_7c19d9_idx')],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='Рейтинг')),
                ('social_links', models.JSONField(blank=True, default=dict, verbose_name='Социальные сети')),
                ('slug', models.SlugField(max_length=150, unique=True, verbose_name='URL')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('specializations', models.ManyToManyField(blank=True, related_name='profiles', to='accounts.specialization', verbose_name='Специализации')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('institution', models.CharField(max_length=200, verbose_name='Учебное заведение')),
                ('degree', models.CharField(max_length=100, verbose_name='Степень/Квалификация')),
                ('field_of_study', models.CharField(max_length=100, verbose_name='Направление обучения')),
                ('start_date', models.DateField(verbose_name='Дата начала')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education_records', to='accounts.profile')),
            ],
            options={
                'verbose_name': 'Образование',
                'verbose_name_plural': 'Образование',
                'ordering': ['-end_date', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('action', models.CharField(choices=[('create', 'Создание'), ('update', 'Изменение'), ('delete', 'Удаление')], max_length=10)),
                ('object_id', models.PositiveIntegerField()),
                ('changes', models.JSONField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Лог аудита',
                'verbose_name_plural': 'Логи аудита',
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('date_received', models.DateField(verbose_name='Дата получения')),
                ('issuer', models.CharField(max_length=200, verbose_name='Кем выдано')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('certificate_file', models.FileField(blank=True, upload_to='certificates/', verbose_name='Файл сертификата')),
                ('certificate_link', models.URLField(blank=True, verbose_name='Ссылка на сертификат')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievement_records', to='accounts.profile')),
            ],
            options={
                'verbose_name': 'Достижение',
                'verbose_name_plural': 'Достижения',
                'ordering': ['-date_received'],
            },
        ),
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('company', models.CharField(max_length=200, verbose_name='Компания/Организация')),
                ('position', models.CharField(max_length=100, verbose_name='Должность')),
                ('start_date', models.DateField(verbose_name='Дата начала')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания')),
                ('description', models.TextField(blank=True, verbose_name='Описание обязанностей')),
                ('is_current', models.BooleanField(default=False, verbose_name='Текущее место работы')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_experiences', to='accounts.profile')),
            ],
            options={
                'verbose_name': 'Опыт работы',
                'verbose_name_plural': 'Опыт работы',
                'ordering': ['-start_date'],
                'indexes': [models.Index(fields=['profile', 'is_current'], name='accounts_wo_profile_5eb047_idx'), models.Index(fields=['profile', 'start_date'], name='accounts_wo_profile_150f2a_idx')],
            },
        ),
        migrations.CreateModel(
            name='RoleSpecificData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('student', 'Студент'), ('teacher', 'Учитель'), ('producer', 'Продюсер'), ('admin', 'Администратор')], max_length=20)),
                ('data', models.JSONField(verbose_name='Данные')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_specific_data', to='accounts.profile')),
            ],
            options={
                'verbose_name': 'Данные роли',
                'verbose_name_plural': 'Данные ролей',
                'indexes': [models.Index(fields=['profile', 'role'], name='accounts_ro_profile_3481f3_idx'), models.Index(fields=['-updated_at'], name='accounts_ro_updated_fc80a9_idx')],
                'unique_together': {('profile', 'role')},
            },
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['user', 'rating'], name='accounts_pr_user_id_68e4b2_idx'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['slug'], name='accounts_pr_slug_ea9f2d_idx'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['-created_at'], name='accounts_pr_created_32864a_idx'),
        ),
        migrations.AddIndex(
            model_name='education',
            index=models.Index(fields=['profile', 'start_date'], name='accounts_ed_profile_50dc96_idx'),
        ),
        migrations.AddIndex(
            model_name='education',
            index=models.Index(fields=['profile', 'end_date'], name='accounts_ed_profile_f18c1a_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['content_type', 'object_id'], name='accounts_au_content_659137_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['-timestamp'], name='accounts_au_timesta_40aa9a_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user', '-timestamp'], name='accounts_au_user_id_1110c4_idx'),
        ),
        migrations.AddIndex(
            model_name='achievement',
            index=models.Index(fields=['profile', 'date_received'], name='accounts_ac_profile_c7c9f0_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role', 'username'], name='accounts_us_role_c3c516_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role', 'email'], name='accounts_us_role_0eee33_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(condition=models.Q(('is_active', True)), fields=['role', 'username'], name='active_users_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['date_joined', 'role'], name='accounts_us_date_jo_98a3df_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('role__in', ['student', 'teacher', 'producer', 'admin'])), name='valid_role'),
        ),
    ]
