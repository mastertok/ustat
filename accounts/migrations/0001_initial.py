# Generated by Django 5.1.5 on 2025-01-19 07:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('slug', models.SlugField(unique=True, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Специализация',
                'verbose_name_plural': 'Специализации',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('student', 'Студент'), ('teacher', 'Учитель'), ('producer', 'Продюсер'), ('admin', 'Администратор')], default='student', max_length=10, verbose_name='Роль')),
                ('bio', models.TextField(blank=True, verbose_name='Биография')),
                ('avatar', models.ImageField(blank=True, upload_to='avatars/', verbose_name='Фото профиля')),
                ('phone', models.CharField(blank=True, max_length=15, verbose_name='Телефон')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'permissions': [('can_enroll_course', 'Может записаться на курс'), ('can_view_course_content', 'Может просматривать содержимое курса'), ('can_leave_review', 'Может оставлять отзывы'), ('can_create_course', 'Может создавать курсы'), ('can_edit_own_course', 'Может редактировать свои курсы'), ('can_view_course_analytics', 'Может просматривать аналитику своих курсов'), ('can_interact_with_students', 'Может взаимодействовать со студентами'), ('can_edit_course_landing', 'Может редактировать лендинги курсов'), ('can_manage_promotions', 'Может управлять акциями и промокодами'), ('can_view_marketing_analytics', 'Может просматривать маркетинговую аналитику'), ('can_manage_advertising', 'Может управлять рекламой'), ('can_manage_email_campaigns', 'Может управлять email-рассылками'), ('can_manage_users', 'Может управлять пользователями'), ('can_manage_all_courses', 'Может управлять всеми курсами'), ('can_manage_site_settings', 'Может управлять настройками сайта')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ProducerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.CharField(blank=True, max_length=100, verbose_name='Компания')),
                ('portfolio', models.URLField(blank=True, verbose_name='Портфолио')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='producer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль продюсера',
                'verbose_name_plural': 'Профили продюсеров',
            },
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experience_summary', models.TextField(blank=True, verbose_name='Краткое описание опыта')),
                ('achievements_summary', models.TextField(blank=True, verbose_name='Краткое описание достижений')),
                ('education_summary', models.TextField(blank=True, verbose_name='Краткое описание образования')),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, verbose_name='Рейтинг')),
                ('students_count', models.PositiveIntegerField(default=0, verbose_name='Количество учеников')),
                ('reviews_count', models.PositiveIntegerField(default=0, verbose_name='Количество отзывов')),
                ('social_links', models.JSONField(blank=True, default=dict, verbose_name='Социальные сети')),
                ('teaching_style', models.TextField(blank=True, verbose_name='Стиль преподавания')),
                ('slug', models.SlugField(blank=True, unique=True, verbose_name='URL')),
                ('specializations', models.ManyToManyField(related_name='teachers', to='accounts.specialization', verbose_name='Специализации')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль учителя',
                'verbose_name_plural': 'Профили учителей',
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution', models.CharField(max_length=200, verbose_name='Учебное заведение')),
                ('degree', models.CharField(max_length=100, verbose_name='Степень/Квалификация')),
                ('field_of_study', models.CharField(max_length=100, verbose_name='Направление обучения')),
                ('start_date', models.DateField(verbose_name='Дата начала')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education_records', to='accounts.teacherprofile')),
            ],
            options={
                'verbose_name': 'Образование',
                'verbose_name_plural': 'Образование',
                'ordering': ['-end_date', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('date_received', models.DateField(verbose_name='Дата получения')),
                ('issuer', models.CharField(max_length=200, verbose_name='Кем выдано')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('certificate_file', models.FileField(blank=True, upload_to='certificates/', verbose_name='Файл сертификата')),
                ('certificate_link', models.URLField(blank=True, verbose_name='Ссылка на сертификат')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievement_records', to='accounts.teacherprofile')),
            ],
            options={
                'verbose_name': 'Достижение',
                'verbose_name_plural': 'Достижения',
                'ordering': ['-date_received'],
            },
        ),
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.CharField(max_length=200, verbose_name='Компания/Организация')),
                ('position', models.CharField(max_length=100, verbose_name='Должность')),
                ('start_date', models.DateField(verbose_name='Дата начала')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания')),
                ('description', models.TextField(blank=True, verbose_name='Описание обязанностей')),
                ('is_current', models.BooleanField(default=False, verbose_name='Текущее место работы')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_experiences', to='accounts.teacherprofile')),
            ],
            options={
                'verbose_name': 'Опыт работы',
                'verbose_name_plural': 'Опыт работы',
                'ordering': ['-start_date'],
            },
        ),
    ]
