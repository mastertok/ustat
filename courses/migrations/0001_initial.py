# Generated by Django 4.2.18 on 2025-01-24 14:05

import ckeditor.fields
import courses.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Название')),
                ('slug', models.SlugField(unique=True, verbose_name='URL')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('courses_count', models.PositiveIntegerField(default=0, verbose_name='Количество курсов')),
                ('active_courses_count', models.PositiveIntegerField(default=0, verbose_name='Активные курсы')),
                ('total_students', models.PositiveIntegerField(default=0, verbose_name='Всего студентов')),
                ('average_course_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, verbose_name='Средний рейтинг курсов')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('last_course_added', models.DateTimeField(blank=True, null=True, verbose_name='Последний добавленный курс')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='courses.category', verbose_name='Родительская категория')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(unique=True, verbose_name='URL')),
                ('description', ckeditor.fields.RichTextField(verbose_name='Описание')),
                ('excerpt', models.TextField(blank=True, verbose_name='Краткое описание')),
                ('cover_image', models.ImageField(help_text='Рекомендуемый размер: 700x430px. Максимальный размер: 2MB', upload_to='courses/covers/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif']), courses.models.validate_image_size], verbose_name='Обложка')),
                ('video_intro', models.URLField(blank=True, help_text='Поддерживаются ссылки с YouTube и Vimeo', null=True, validators=[courses.models.validate_video_url], verbose_name='Вводное видео')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Цена')),
                ('currency', models.CharField(choices=[('KGS', 'Кыргызский сом'), ('USD', 'Доллар США'), ('RUB', 'Российский рубль')], default='KGS', max_length=3, verbose_name='Валюта')),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Цена со скидкой')),
                ('difficulty', models.CharField(choices=[('beginner', 'Начальный'), ('intermediate', 'Средний'), ('advanced', 'Продвинутый')], default='beginner', max_length=20, verbose_name='Сложность')),
                ('language', models.CharField(choices=[('ru', 'Русский'), ('ky', 'Кыргызский'), ('en', 'Английский')], default='ru', max_length=2, verbose_name='Язык')),
                ('duration', models.PositiveIntegerField(default=0, verbose_name='Длительность (в минутах)')),
                ('status', models.CharField(choices=[('draft', 'Черновик'), ('review', 'На проверке'), ('published', 'Опубликован'), ('archived', 'В архиве')], default='draft', max_length=20, verbose_name='Статус')),
                ('type', models.CharField(choices=[('free', 'Бесплатный'), ('paid', 'Платный'), ('public', 'Публичный')], default='paid', max_length=20, verbose_name='Тип курса')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата публикации')),
                ('archived_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата архивации')),
                ('students_count', models.PositiveIntegerField(default=0, verbose_name='Количество студентов')),
                ('reviews_count', models.PositiveIntegerField(default=0, verbose_name='Количество отзывов')),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Средний рейтинг')),
                ('total_lessons', models.PositiveIntegerField(default=0, verbose_name='Всего уроков')),
                ('completion_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Процент завершения')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='courses.category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Курс',
                'verbose_name_plural': 'Курсы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('slug', models.SlugField(unique=True, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='TrafficSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('source', models.CharField(max_length=100, verbose_name='Источник')),
                ('utm_campaign', models.CharField(blank=True, max_length=100, verbose_name='UTM кампания')),
                ('utm_content', models.CharField(blank=True, max_length=100, verbose_name='UTM контент')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Количество просмотров')),
                ('conversion_count', models.PositiveIntegerField(default=0, verbose_name='Количество конверсий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.course')),
            ],
            options={
                'verbose_name': 'Источник трафика',
                'verbose_name_plural': 'Источники трафика',
            },
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('slug', models.SlugField(unique=True, verbose_name='URL')),
                ('teachers_count', models.PositiveIntegerField(default=0, verbose_name='Количество преподавателей')),
                ('courses_count', models.PositiveIntegerField(default=0, verbose_name='Количество курсов')),
                ('total_students', models.PositiveIntegerField(default=0, verbose_name='Всего студентов')),
                ('average_teacher_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, verbose_name='Средний рейтинг преподавателей')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_trending', models.BooleanField(default=False, verbose_name='Популярная специализация')),
            ],
            options={
                'verbose_name': 'Специализация',
                'verbose_name_plural': 'Специализации',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='courses_spe_name_1f6084_idx'), models.Index(fields=['slug'], name='courses_spe_slug_e6255f_idx'), models.Index(fields=['-teachers_count'], name='courses_spe_teacher_2cf6fc_idx'), models.Index(fields=['-courses_count'], name='courses_spe_courses_3824ab_idx'), models.Index(fields=['-average_teacher_rating'], name='courses_spe_average_ee970b_idx'), models.Index(fields=['is_trending', '-teachers_count'], name='courses_spe_is_tren_5b5a2c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('discount_percent', models.PositiveIntegerField(verbose_name='Процент скидки')),
                ('start_date', models.DateTimeField(verbose_name='Дата начала')),
                ('end_date', models.DateTimeField(verbose_name='Дата окончания')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('courses', models.ManyToManyField(related_name='promotions', to='courses.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Акция',
                'verbose_name_plural': 'Акции',
            },
        ),
        migrations.CreateModel(
            name='Promocode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='Код')),
                ('discount_percent', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Процент скидки')),
                ('valid_from', models.DateTimeField(verbose_name='Действует с')),
                ('valid_until', models.DateTimeField(verbose_name='Действует до')),
                ('max_uses', models.PositiveIntegerField(verbose_name='Максимальное количество использований')),
                ('used_count', models.PositiveIntegerField(default=0, verbose_name='Использовано раз')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата обновления')),
                ('courses', models.ManyToManyField(related_name='promocodes', to='courses.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Промокод',
                'verbose_name_plural': 'Промокоды',
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='courses.course')),
            ],
            options={
                'verbose_name': 'Модуль',
                'verbose_name_plural': 'Модули',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('content_type', models.CharField(choices=[('video', 'Видео'), ('text', 'Текст'), ('test', 'Тест'), ('presentation', 'Презентация')], max_length=20, verbose_name='Тип контента')),
                ('content', ckeditor.fields.RichTextField(verbose_name='Содержание')),
                ('video_url', models.URLField(blank=True, null=True, validators=[courses.models.validate_video_url], verbose_name='URL видео')),
                ('file', models.FileField(blank=True, null=True, upload_to='courses/lessons/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'ppt', 'pptx'])], verbose_name='Файл')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Продолжительность (в минутах)')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.module')),
            ],
            options={
                'verbose_name': 'Урок',
                'verbose_name_plural': 'Уроки',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='EmailCampaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('subject', models.CharField(max_length=200, verbose_name='Тема письма')),
                ('content', models.TextField(verbose_name='Содержание')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Отправлено')),
                ('recipients_count', models.PositiveIntegerField(default=0, verbose_name='Количество получателей')),
                ('opens_count', models.PositiveIntegerField(default=0, verbose_name='Количество открытий')),
                ('clicks_count', models.PositiveIntegerField(default=0, verbose_name='Количество кликов')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('courses', models.ManyToManyField(related_name='email_campaigns', to='courses.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email кампания',
                'verbose_name_plural': 'Email кампании',
            },
        ),
        migrations.CreateModel(
            name='CourseUserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('teacher', 'Преподаватель'), ('producer', 'Продюсер'), ('assistant', 'Ассистент')], max_length=20, verbose_name='Роль')),
                ('permissions', models.JSONField(blank=True, default=dict, verbose_name='Права доступа')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Основная роль')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='added_course_roles', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Роль пользователя в курсе',
                'verbose_name_plural': 'Роли пользователей в курсах',
            },
        ),
        migrations.CreateModel(
            name='CourseAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Количество просмотров')),
                ('completion_count', models.PositiveIntegerField(default=0, verbose_name='Количество завершений')),
                ('completion_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Процент завершения')),
                ('total_ratings', models.PositiveIntegerField(default=0, verbose_name='Всего оценок')),
                ('rating_sum', models.PositiveIntegerField(default=0, verbose_name='Сумма оценок')),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, verbose_name='Средний рейтинг')),
                ('revenue', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Доход')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('course', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='courses.course')),
            ],
            options={
                'verbose_name': 'Аналитика курса',
                'verbose_name_plural': 'Аналитика курсов',
            },
        ),
        migrations.AddField(
            model_name='course',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='courses', to='courses.tag', verbose_name='Теги'),
        ),
        migrations.AddField(
            model_name='course',
            name='users',
            field=models.ManyToManyField(related_name='participated_courses', through='courses.CourseUserRole', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('content', ckeditor.fields.RichTextField(verbose_name='Содержание')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата обновления')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='courses.course')),
            ],
            options={
                'verbose_name': 'Объявление',
                'verbose_name_plural': 'Объявления',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('event_type', models.CharField(choices=[('view', 'Просмотр'), ('complete', 'Завершение'), ('rate', 'Оценка'), ('purchase', 'Покупка')], max_length=10, verbose_name='Тип события')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время события')),
                ('data', models.JSONField(default=dict, verbose_name='Данные события')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics_logs', to='courses.course')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='analytics_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Лог аналитики',
                'verbose_name_plural': 'Логи аналитики',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Оценка')),
                ('text', models.TextField(verbose_name='Отзыв')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата обновления')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
                'unique_together': {('course', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('enrolled_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата зачисления')),
                ('status', models.CharField(choices=[('active', 'Активный'), ('completed', 'Завершен'), ('dropped', 'Отчислен')], default='active', max_length=20, verbose_name='Статус')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата завершения')),
                ('progress', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Прогресс (%)')),
                ('last_accessed', models.DateTimeField(blank=True, null=True, verbose_name='Последний доступ')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Зачисление',
                'verbose_name_plural': 'Зачисления',
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.AddIndex(
            model_name='courseuserrole',
            index=models.Index(fields=['course', 'role'], name='courses_cou_course__372952_idx'),
        ),
        migrations.AddIndex(
            model_name='courseuserrole',
            index=models.Index(fields=['user', 'role'], name='courses_cou_user_id_2ec2e3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='courseuserrole',
            unique_together={('course', 'user', 'role')},
        ),
        migrations.AddIndex(
            model_name='courseanalytics',
            index=models.Index(fields=['course', '-updated_at'], name='courses_cou_course__1ab6ab_idx'),
        ),
        migrations.AddIndex(
            model_name='courseanalytics',
            index=models.Index(fields=['-views_count'], name='courses_cou_views_c_fc2fe5_idx'),
        ),
        migrations.AddIndex(
            model_name='courseanalytics',
            index=models.Index(fields=['-average_rating'], name='courses_cou_average_4c0621_idx'),
        ),
        migrations.AddIndex(
            model_name='courseanalytics',
            index=models.Index(fields=['-revenue'], name='courses_cou_revenue_0c2055_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['status', 'type', 'language'], name='courses_cou_status_bbb088_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['-average_rating', '-students_count'], name='courses_cou_average_163593_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['price', 'category'], name='courses_cou_price_083e4b_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['published_at', 'status'], name='courses_cou_publish_0939a0_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['name'], name='courses_cat_name_ab7c10_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['slug'], name='courses_cat_slug_33564e_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['-courses_count'], name='courses_cat_courses_e56d0c_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['-active_courses_count'], name='courses_cat_active__117f85_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['-average_course_rating'], name='courses_cat_average_ba8011_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticslog',
            index=models.Index(fields=['course', '-timestamp'], name='courses_ana_course__666657_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticslog',
            index=models.Index(fields=['event_type', '-timestamp'], name='courses_ana_event_t_0f22cc_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticslog',
            index=models.Index(fields=['user', '-timestamp'], name='courses_ana_user_id_8e09a3_idx'),
        ),
    ]
